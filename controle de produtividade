from flask import Flask, jsonify, request
import sqlite3

app = Flask(__name__)

def init_db():
    conn = sqlite3.connect('produtividade.db')
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS setores (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL UNIQUE
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS funcionarios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL,
            setor_id INTEGER,
            cargo TEXT NOT NULL,
            FOREIGN KEY(setor_id) REFERENCES setores(id)
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tarefas (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            funcionario_id INTEGER,
            nome TEXT NOT NULL,
            data TEXT,
            tempo_gasto INTEGER,
            FOREIGN KEY(funcionario_id) REFERENCES funcionarios(id)
        )
    ''')

    cursor.execute('SELECT COUNT(*) FROM setores')
    if cursor.fetchone()[0] == 0:
        setores = [("Financeiro",), ("TI",), ("Recursos Humanos",)]
        cursor.executemany('INSERT INTO setores (nome) VALUES (?)', setores)

    cursor.execute('SELECT COUNT(*) FROM funcionarios')
    if cursor.fetchone()[0] == 0:
        funcionarios = [
            ("João Silva", 1, "Analista Financeiro"),
            ("Maria Souza", 2, "Desenvolvedora Backend"),
            ("Carlos Pereira", 3, "Recrutador"),
            ("Ana Lima", 1, "Assistente Administrativo"),
            ("Roberto Costa", 2, "Desenvolvedor Frontend"),
        ]
        cursor.executemany('INSERT INTO funcionarios (nome, setor_id, cargo) VALUES (?, ?, ?)', funcionarios)

    cursor.execute('SELECT COUNT(*) FROM tarefas')
    if cursor.fetchone()[0] == 0:
        tarefas = [
            (1, "Análise de relatórios financeiros", "2025-04-01", 4),
            (2, "Desenvolvimento de API", "2025-04-02", 6),
            (3, "Entrevista com candidato", "2025-04-03", 2),
            (4, "Organização de documentos", "2025-04-01", 3),
            (5, "Desenvolvimento da interface do sistema", "2025-04-02", 5),
        ]
        cursor.executemany('INSERT INTO tarefas (funcionario_id, nome, data, tempo_gasto) VALUES (?, ?, ?, ?)', tarefas)

    conn.commit()
    conn.close()

def conectar_db():
    conn = sqlite3.connect('produtividade.db')
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/')
def index():
    return jsonify({"mensagem": "API de Produtividade pronta! Use /setores, /tarefas ou /relatorio para acessar."})

@app.route('/setores', methods=['GET'])
def get_setores():
    conn = conectar_db()
    setores = conn.execute('SELECT id, nome FROM setores ORDER BY nome').fetchall()
    conn.close()
    return jsonify({"setores": [{"id": s["id"], "nome": s["nome"]} for s in setores]})

@app.route('/tarefas', methods=['GET'])
def get_tarefas():
    setor_id = request.args.get('setor_id')
    data = request.args.get('data')

    conn = conectar_db()
    query = '''
        SELECT setores.nome AS setor, funcionarios.nome AS funcionario, tarefas.nome AS tarefa, tarefas.data, tarefas.tempo_gasto
        FROM tarefas
        JOIN funcionarios ON tarefas.funcionario_id = funcionarios.id
        JOIN setores ON funcionarios.setor_id = setores.id
    '''
    params = []
    conditions = []

    if setor_id:
        conditions.append('setores.id = ?')
        params.append(setor_id)
    if data:
        conditions.append('tarefas.data = ?')
        params.append(data)
    if conditions:
        query += ' WHERE ' + ' AND '.join(conditions)

    query += ' ORDER BY tarefas.data DESC'

    tarefas = conn.execute(query, params).fetchall()
    conn.close()

    tarefas_lista = []
    for t in tarefas:
        tarefas_lista.append({
            "setor": t["setor"],
            "funcionario": t["funcionario"],
            "tarefa": t["tarefa"],
            "data": t["data"],
            "tempo_gasto": t["tempo_gasto"]
        })

    return jsonify({"tarefas": tarefas_lista})

@app.route('/relatorio', methods=['GET'])
def relatorio():
    conn = conectar_db()
    relatorio = conn.execute('''
        SELECT funcionarios.nome AS funcionario, SUM(tarefas.tempo_gasto) AS total_tempo
        FROM tarefas
        JOIN funcionarios ON tarefas.funcionario_id = funcionarios.id
        GROUP BY funcionarios.nome
        ORDER BY total_tempo DESC
    ''').fetchall()
    conn.close()

    rel = [{"funcionario": r["funcionario"], "total_tempo": r["total_tempo"]} for r in relatorio]
    return jsonify({"relatorio": rel})

if __name__ == '__main__':
    init_db()
    app.run(debug=True, host="0.0.0.0", port=3000)
